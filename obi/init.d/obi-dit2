#!/bin/bash
# chkconfig: 345 95 20
# description: Start up OBIEE processes
# 
# File:    /etc/init.d/obi-dit
# Purpose: Start and stop Oracle Business Intelligence 11g components.
# Author: RNM @ RMC
# Originally based on: https://forums.oracle.com/forums/thread.jspa?threadID=2179408
#
# To set it to run on bootup:
# 1. Create this file at /etc/init.d/obi-dit
# 2. chmod 750 /etc/init.d/obi-dit
# 3. chkconfig --add obi-dit
# 
#  Change history
# 
#  v1.10	2013-06-18	RNM	Add status check for WLS Servers
#  v1.11	2013-06-18	RNM	Remove /var/lock as it's not used and can just causes perm issues
#  v1.12        2013-06-18      RNM     Fix stupid LOGPATH/LOG_PATH typo
#  v1.13        2013-06-19      RNM     Fix even more stupid removal of /var/lock as it IS USED in init.d
#                                         to determine whether a process needs killing at server shutdown
#  v1.14	2013-06-19	RNM	Add lsof path as a variable
#					Refine port number detection (nb hardcoded to loopback, will break 
#                                         if WLS is listening on restricted list of IPs)
#  v1.15	2013-06-19	RNM	Fix bug in multi-env install which results in *all* NodeManagers 
#					  being killed (add FMW_HOME qualification)
# 
# ---------------------------------
# These values must be adapted to your environment.

# This must match the script name (eg obi-dit), as it is used for the process lockfile
SUBSYS=obi-dit

# The OS owner under which OBIEE should be managed
ORACLE_OWNR=oracle-dit

# The FMW Home folder
FMW_HOME=/u01/dit/fmw 

# Folder in which to store log files - change if you don't want them in /var/log
LOG_PATH=/var/log

# lsof path
LSOF_PATH=/usr/sbin/lsof
# 
# 
# 
# -----------------
# These should require no change.
# -----------------
BIEE_DOMAIN=bifoundation_domain    # Domain name
BIEE_INSTANCE=instance1            # Instance name
WLS_MANAGED_SERVER=bi_server1      # Server name
WLS_PATH=$FMW_HOME/wlserver_10.3/server/bin
WLS_DOMAIN_BIN=$FMW_HOME/user_projects/domains/$BIEE_DOMAIN/bin
ORACLE_INSTANCE=$FMW_HOME/instances/$BIEE_INSTANCE
#
ADMIN_SERVER_START_TIMEOUT=120
MANAGED_SERVER_START_TIMEOUT=900
NODE_MANAGER_START_TIMEOUT=60
#
export ORACLE_INSTANCE
# --------------------------
# Source function library.
if [ -f /etc/rc.d/init.d/functions ]; then
      . /etc/rc.d/init.d/functions
fi
# --------------------------
#
NODE_MANAGER_FINGERPRINT=$FMW_HOME'.*weblogic.NodeManager'
ADMIN_SERVER_FINGERPRINT=$FMW_HOME'.*-Dweblogic.Name=AdminServer'
MANAGED_SERVER_FINGERPRINT=$FMW_HOME'.*-Dweblogic.Name=bi_server1'
OPMN_FINGERPRINT=$FMW_HOME'.*/bin/opmn'
#
# ---------------------------------

START_LOG=$LOG_PATH/$SUBSYS-start.log
STOP_LOG=$LOG_PATH/$SUBSYS-stop.log

start() {
	echo -n "Starting Admin Server "
	su $ORACLE_OWNR -c "$WLS_DOMAIN_BIN/startWebLogic.sh" &>$START_LOG & 
	new_wait_for check_admin_server $ADMIN_SERVER_START_TIMEOUT

	if [ $? -eq 0 ] ; then 

		echo -n "Starting Node Manager "
		su $ORACLE_OWNR -c "$WLS_PATH/startNodeManager.sh" &>$START_LOG & 
		new_wait_for check_node_manager $NODE_MANAGER_START_TIMEOUT

		if [ $? -eq 0 ] ; then 
			echo -n "Starting Managed Server" 
			su $ORACLE_OWNR -c "$WLS_DOMAIN_BIN/startManagedWebLogic.sh $WLS_MANAGED_SERVER" &>$START_LOG &
			wait_for "Server started in RUNNING mode" status_managed_server

			echo -n "Initiating OPMN startup "
			su $ORACLE_OWNR -c "$ORACLE_INSTANCE/bin/opmnctl startall" &>$START_LOG
			echo_success
		fi
	fi

}

stop() {
	echo -n "Shutting down OPMN and BI Components"
	su $ORACLE_OWNR -c "$ORACLE_INSTANCE/bin/opmnctl stopall"

    echo "********************************************************************************"
    echo "Stopping Managed Server $WLS_MANAGED_SERVER on $(date)"
    echo "********************************************************************************"
    su $ORACLE_OWNR -c "$WLS_DOMAIN_BIN/stopManagedWebLogic.sh $WLS_MANAGED_SERVER"

    echo "********************************************************************************"
    echo "Stopping Node Manager on $(date)"
    echo "********************************************************************************"
    # TODO: Should be able to do this with pgrep alone, if I could figure out the regex
    echo " Killing pid: " $(ps -ef|grep weblogic\.NodeManager|grep $FMW_HOME|awk '{print $2}')
    ps -ef|grep weblogic\.NodeManager|grep $FMW_HOME|awk '{print $2}'|xargs -i'{}' kill -9 {}

    echo "********************************************************************************"
    echo "Stopping Admin Server on $(date)"
    echo "********************************************************************************"
    su $ORACLE_OWNR -c "$WLS_DOMAIN_BIN/stopWebLogic.sh"

    echo "********************************************************************************"
    echo "OBIEE stop sequence completed on $(date)"
    echo "********************************************************************************"
}


check_process_ports () {
	# Pass the 'fingerprint' of the process to check, which should be a regex to uniquely
	# identify the process in a pgrep -f call
	#
	# Returns: 
	# 0 - Process not running
	# 1 - Process running but not listening on any port
	# <ports> - the port(s) on which the process is listening
	PID=$(pgrep -f $1)
	if [ $? -eq 0 ] ; then
		PORT=$(pgrep -f $1|xargs -I'{}' $LSOF_PATH -nPp {}|grep LISTEN|awk -F ":" '{print $2}'|cut -d " " -f 1|sort -u|paste -s)
		if [ -n "$PORT" ] ; then
			echo $PORT
		else
			echo 1
		fi
	else
		echo 0
	fi
	echo ' '
}


status_admin_server () {
	echo_process_status check_process_ports $ADMIN_SERVER_FINGERPRINT
}

status_managed_server () {
	echo_process_status check_process_ports $MANAGED_SERVER_FINGERPRINT
}

status_node_manager () {
	echo_process_status check_process_ports $NODE_MANAGER_FINGERPRINT
}

status_opmn () {
	echo_process_status check_process_ports $OPMN_FINGERPRINT
}

echo_process_status () {
	rc=$($1 $2)
	case "$rc" in
		0)
			echo_failure
			;;
		1)	
			echo_in_progress
			;;
		*)
			echo -n "listening on port" $rc
			echo_success
	esac
	echo ' '
}

check_admin_server () {

	# Check Admin Server
	ps -fC java|grep Dweblogic.Name=AdminServer|grep $FMW_HOME > /dev/null
	if [ $? -eq 0 ] ; then
		ADMIN_SERVER_PORT=$(ps -fC "java"|grep AdminServer|grep $FMW_HOME|awk '{print $2}'|xargs -I'{}' $LSOF_PATH -nPp {}|grep LISTEN|grep 127.0.0.1|awk -F ":" '{print $2}'|cut -d " " -f 1)
		if [ $ADMIN_SERVER_PORT ] ; then
			echo $ADMIN_SERVER_PORT
		else
			echo 1
		fi
	else
		echo 0
	fi
}

check_managed_server () {

	# Check Managed Server
	ps -fC java|grep Dweblogic.Name=$WLS_MANAGED_SERVER|grep $FMW_HOME > /dev/null
	if [ $? -eq 0 ] ; then
		MANAGED_SERVER_PORT=$(ps -fC "java"|grep $WLS_MANAGED_SERVER|grep $FMW_HOME|awk '{print $2}'|xargs -I'{}' $LSOF_PATH -nPp {}|grep LISTEN|grep 127.0.0.1|awk -F ":" '{print $2}'|cut -d " " -f 1)
		if [ $MANAGED_SERVER_PORT ] ; then
			echo $MANAGED_SERVER_PORT
		else
			echo 1
		fi
	else
		echo 0
	fi

}

status_opmnold () {

	# Check OPMN
	ps -fC "opmn" |grep $FMW_HOME > /dev/null
	if [ $? -eq 0 ] ; then
		OPMN_PORT=$(ps -fC "opmn" |grep $FMW_HOME|awk '{print $2}'|xargs -I'{}' lsof -nPp {}|grep LISTEN|awk -F ":" '{print $2}'|cut -d " " -f 1|paste -s)
		if [ -n "$OPMN_PORT" ] ; then
			echo -n "listening on port" $OPMN_PORT
			echo_success
			echo ' '
			su $ORACLE_OWNR -c "$ORACLE_INSTANCE/bin/opmnctl status"
		else
			echo_in_progress
		fi
	else
		echo_failure
	fi
	echo ' ' 

}

status () {
	echo -n ' Checking WLS Node Manager: '
	status_node_manager 

	echo -n ' Checking WLS Admin Server: '
	status_admin_server  

	echo -n ' Checking WLS Managed Server: '
	status_managed_server 

	echo -n ' Checking OPMN: '
	status_opmn 
}

wait_for() {
    res=0
    while [[ ! $res -gt 0 ]]
    do
        res=$(tail -5 "$START_LOG" | fgrep -c "$1")
        sleep 30
	echo -n "."
    done
    $2
}

new_wait_for() {
	rc=0
	timeout=$2
	starttime=$(date +%s)
	while [[ ! $rc -gt 1 ]]
	do
		rc=$($1)
		sleep 5
		nowtime=$(date +%s)
		timediff=$(( $nowtime - $starttime ))
		if [ $timediff -gt $timeout ] ; then
			echo_failure
			echo ' (Timed out after '$timeout' seconds )'
			return 255
		fi
		echo -n '.'
	done
	echo_success
	echo ' '
	return 0
}
		
		

echo_in_progress() {
  [ "$BOOTUP" = "color" ] && $MOVE_TO_COL
  echo -n "["
  [ "$BOOTUP" = "color" ] && $SETCOLOR_WARNING
  echo -n $"IN PROGRESS"
  [ "$BOOTUP" = "color" ] && $SETCOLOR_NORMAL
  echo -n "]"
  echo -ne "\r"
  return 1
}

case "$1" in
    start)
        start 
        touch /var/lock/subsys/$SUBSYS
    ;;
    stop)
        echo "********************************************************************************"
        echo "Stopping Oracle Business Intelligence on $(date)"
        echo "Logs are sent to $STOP_LOG"
        echo "********************************************************************************"
        stop &> $STOP_LOG
        rm -f /var/lock/subsys/$SUBSYS
    ;;
    status)
	status
    ;;
    restart)
        $0 stop
        $0 start
    ;;
    *)
        echo "Usage: $(basename $0) start|stop|restart|status"
        exit 1
esac

exit 0
